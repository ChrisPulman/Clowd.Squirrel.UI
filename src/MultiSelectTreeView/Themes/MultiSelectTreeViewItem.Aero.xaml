<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:System.Windows.Controls">

    <Controls:ThicknessLeftConverter x:Key="ThicknessLeftConverter" />

    <Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding (VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, FallbackValue=True}" Value="True">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>

        <Style.Resources>
            <!--  Windows 7 Aero Theme colours and brushes  -->
            <SolidColorBrush x:Key="HoveredBorderBrush" Color="#b097c3f9" />
            <LinearGradientBrush x:Key="HoveredBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Offset="0" Color="#fafbfd" />
                <GradientStop Offset="1" Color="#ebf3fd" />
            </LinearGradientBrush>

            <SolidColorBrush x:Key="SelectedBorderBrush" Color="#7da2ce" />
            <LinearGradientBrush x:Key="SelectedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Offset="0" Color="#ebf4fe" />
                <GradientStop Offset="1" Color="#cfe4fe" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="SelectedHoveredBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Offset="0" Color="#dcebfc" />
                <GradientStop Offset="1" Color="#c1dbfc" />
            </LinearGradientBrush>

            <SolidColorBrush x:Key="FocusedBorderBrush" Color="#7da2ce" />

            <SolidColorBrush x:Key="InactiveBorderBrush" Color="#b5c9c9c9" />
            <LinearGradientBrush x:Key="InactiveBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Offset="0" Color="#f8f8f8" />
                <GradientStop Offset="1" Color="#d8d8d8" />
            </LinearGradientBrush>
        </Style.Resources>

        <Setter Property="RemarksTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Margin="3,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding}" Value="">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplateEdit">
            <Setter.Value>
                <DataTemplate>
                    <Controls:EditTextBox
                        Padding="1"
                        BorderThickness="0"
                        Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="{Binding (VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, FallbackValue=Standard}" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False" />
        <Setter Property="Panel.Background" Value="#00FFFFFF" />
        <Setter Property="Control.HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}" />
        <Setter Property="Control.VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}" />
        <Setter Property="Control.Padding" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0" />
        <!--  Clear the default focus rectangle which would span the entire item in full width and with all visible children  -->
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />

        <!--  Pass on the MultiSelectTreeView' HoverHighlighting value to each item because we couldn't access it otherwise in the triggers  -->
        <Setter Property="HoverHighlighting" Value="{Binding Path=HoverHighlighting, RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}" />
        <Setter Property="ItemIndent" Value="{Binding Path=ItemIndent, RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=13}" />
        <Setter Property="IsKeyboardMode" Value="{Binding Path=IsKeyboardMode, RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}" />

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
                    <!--  region ControlTemplate content  -->
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <!--  Set the second column width to * to have the items border expand to the right edge  -->
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!--  region Expander button  -->
                            <ToggleButton
                                Name="Expander"
                                ClickMode="Press"
                                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeViewItem}}, Path=IsExpanded, FallbackValue=False}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Style.Resources>
                                            <ResourceDictionary />
                                        </Style.Resources>
                                        <Setter Property="UIElement.Focusable" Value="False" />
                                        <Setter Property="FrameworkElement.Width" Value="12" />
                                        <Setter Property="FrameworkElement.Height" Value="16" />
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <!--  Default expander arrow graphic  -->
                                                    <Border
                                                        Width="12"
                                                        Height="16"
                                                        Padding="3,5"
                                                        Background="#00FFFFFF">
                                                        <Path
                                                            Name="ExpandPath"
                                                            Fill="#00FFFFFF"
                                                            Stroke="#FF989898">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0 L0,6 L6,0 z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <!--  Make it blue when the mouse cursor is over it  -->
                                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke">
                                                                <Setter.Value>
                                                                    <SolidColorBrush>#FF1BBBFA</SolidColorBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill">
                                                                <Setter.Value>
                                                                    <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                        <!--  Rotate and make it dark when the node is expanded  -->
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill">
                                                                <Setter.Value>
                                                                    <SolidColorBrush>#FF595959</SolidColorBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke">
                                                                <Setter.Value>
                                                                    <SolidColorBrush>#FF262626</SolidColorBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                        <!--  Make it (darker) blue when expanded and the mouse cursor is over it  -->
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                                                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                                                            </MultiTrigger.Conditions>
                                                            <MultiTrigger.Setters>
                                                                <Setter TargetName="ExpandPath" Property="Shape.Stroke">
                                                                    <Setter.Value>
                                                                        <SolidColorBrush>#FF1BBBFA</SolidColorBrush>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter TargetName="ExpandPath" Property="Shape.Fill">
                                                                    <Setter.Value>
                                                                        <SolidColorBrush>#701BBBFA</SolidColorBrush>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </MultiTrigger.Setters>
                                                        </MultiTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <!--  endregion Expander button  -->

                            <!--  region Element grid  -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                <Grid Name="ElementGrid">
                                    <Border
                                        Margin="0,0,0,-1"
                                        Padding="{TemplateBinding Control.Padding}"
                                        VerticalAlignment="Center"
                                        Background="{TemplateBinding Panel.Background}"
                                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                                        CornerRadius="2"
                                        SnapsToDevicePixels="True">
                                        <ContentPresenter
                                            Name="PART_Header"
                                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                            Content="{TemplateBinding HeaderedContentControl.Header}"
                                            ContentSource="Header"
                                            ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                            ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                            FocusManager.IsFocusScope="True"
                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                    </Border>
                                    <!--  Additional border glare inside the item  -->
                                    <Border
                                        Margin="1,1,1,0"
                                        BorderBrush="#80ffffff"
                                        BorderThickness="1"
                                        CornerRadius="2"
                                        IsHitTestVisible="False"
                                        SnapsToDevicePixels="True" />
                                </Grid>

                                <ContentPresenter
                                    Content="{TemplateBinding Remarks}"
                                    ContentTemplate="{TemplateBinding RemarksTemplate}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </StackPanel>
                            <!--  endregion Element grid  -->
                        </Grid>
                        <Grid Name="ItemsHostGrid" Margin="{TemplateBinding ItemIndent, Converter={StaticResource ThicknessLeftConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Path
                                Name="RulerPath"
                                Margin="0,0,1,0"
                                Data="M0,0 L0,1"
                                SnapsToDevicePixels="True"
                                Stretch="Uniform"
                                Stroke="#60000000"
                                StrokeDashArray="0.5 2.5" />

                            <ItemsPresenter Name="ItemsHost" Grid.Column="1" />
                        </Grid>
                    </StackPanel>
                    <!--  endregion ControlTemplate content  -->

                    <ControlTemplate.Triggers>

                        <!--  Set the visibility of the item  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="FrameworkElement.Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Set the border and background when the mouse is located over the item and HoverHighlighting is active  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Controls:MultiSelectTreeViewItem.HoverHighlighting" Value="True" />
                                <Condition SourceName="ElementGrid" Property="Controls:MultiSelectTreeViewItem.IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Control.Background" Value="{StaticResource HoveredBackgroundBrush}" />
                            <Setter Property="Border.BorderBrush" Value="{StaticResource HoveredBorderBrush}" />
                        </MultiTrigger>

                        <!--  Set the border and background when the item is selected  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsSelected" Value="True">
                            <Setter Property="Control.Background" Value="{StaticResource SelectedBackgroundBrush}" />
                            <Setter Property="Border.BorderBrush" Value="{StaticResource SelectedBorderBrush}" />
                        </Trigger>

                        <!--  Show the border when the item is focused  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsFocused" Value="True">
                            <Setter Property="Border.BorderBrush" Value="{StaticResource FocusedBorderBrush}" />
                        </Trigger>

                        <!--  Slightly darker background when the item is selected and focused  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Controls:MultiSelectTreeViewItem.IsFocused" Value="True" />
                                <Condition Property="Controls:MultiSelectTreeViewItem.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Control.Background" Value="{StaticResource SelectedHoveredBackgroundBrush}" />
                        </MultiTrigger>

                        <!--  Make all selected items grey when the tree view is not focused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=IsFocused, FallbackValue=False}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" Value="{StaticResource InactiveBorderBrush}" />
                            <Setter Property="Control.Background" Value="{StaticResource InactiveBackgroundBrush}" />
                        </MultiDataTrigger>

                        <!--  Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused)  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" Value="{StaticResource InactiveBorderBrush}" />
                            <Setter Property="Control.Background" Value="{StaticResource InactiveBackgroundBrush}" />
                        </MultiDataTrigger>

                        <!--
                            Set a slightly darker background when the mouse is located over a selected item and HoverHighlighting is active
                            (after inactive grey to override it)
                        -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Controls:MultiSelectTreeViewItem.HoverHighlighting" Value="True" />
                                <Condition SourceName="ElementGrid" Property="Controls:MultiSelectTreeViewItem.IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Control.Background" Value="{StaticResource SelectedHoveredBackgroundBrush}" />
                            <Setter Property="Border.BorderBrush" Value="{StaticResource SelectedBorderBrush}" />
                        </MultiTrigger>

                        <!--  Collapse the child items host if the node is not expanded  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHostGrid" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Hide the expander button if there are no child nodes  -->
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                        </Trigger>

                        <!--  Use grey text colour when the item is not enabled  -->
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>

                        <!--  Hide vertical rulers if disabled  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=VerticalRulers, FallbackValue=False}" Value="False">
                            <Setter TargetName="RulerPath" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  Use a different template and colours in edit mode  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsEditing" Value="True">
                            <Setter Property="HeaderTemplate" Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Control.Background" Value="{StaticResource SelectedBackgroundBrush}" />
                            <Setter Property="Border.BorderBrush" Value="{StaticResource SelectedBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>